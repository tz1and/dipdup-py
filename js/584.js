"use strict";(self.webpackChunkdipdup_docs=self.webpackChunkdipdup_docs||[]).push([[584],{2584:(e,t,n)=>{function i(e){return s(e,[])}function s(e,t){switch(typeof e){case"string":return JSON.stringify(e);case"function":return e.name?`[function ${e.name}]`:"[function]";case"object":return function(e,t){if(null===e)return"null";if(t.includes(e))return"[Circular]";const n=[...t,e];if(function(e){return"function"==typeof e.toJSON}(e)){const t=e.toJSON();if(t!==e)return"string"==typeof t?t:s(t,n)}else if(Array.isArray(e))return function(e,t){if(0===e.length)return"[]";if(t.length>2)return"[Array]";const n=Math.min(10,e.length),i=e.length-n,r=[];for(let i=0;i<n;++i)r.push(s(e[i],t));return 1===i?r.push("... 1 more item"):i>1&&r.push(`... ${i} more items`),"["+r.join(", ")+"]"}(e,n);return function(e,t){const n=Object.entries(e);if(0===n.length)return"{}";if(t.length>2)return"["+function(e){const t=Object.prototype.toString.call(e).replace(/^\[object /,"").replace(/]$/,"");if("Object"===t&&"function"==typeof e.constructor){const t=e.constructor.name;if("string"==typeof t&&""!==t)return t}return t}(e)+"]";const i=n.map((([e,n])=>e+": "+s(n,t)));return"{ "+i.join(", ")+" }"}(e,n)}(e,t);default:return String(e)}}function r(e,t){if(!Boolean(e))throw new Error(null!=t?t:"Unexpected invariant triggered.")}let o;var a;function l(e){return 9===e||32===e}function u(e){return e>=97&&e<=122||e>=65&&e<=90}n.d(t,{S:()=>ke,T:()=>Pe,a:()=>Ge}),(a=o||(o={})).QUERY="QUERY",a.MUTATION="MUTATION",a.SUBSCRIPTION="SUBSCRIPTION",a.FIELD="FIELD",a.FRAGMENT_DEFINITION="FRAGMENT_DEFINITION",a.FRAGMENT_SPREAD="FRAGMENT_SPREAD",a.INLINE_FRAGMENT="INLINE_FRAGMENT",a.VARIABLE_DEFINITION="VARIABLE_DEFINITION",a.SCHEMA="SCHEMA",a.SCALAR="SCALAR",a.OBJECT="OBJECT",a.FIELD_DEFINITION="FIELD_DEFINITION",a.ARGUMENT_DEFINITION="ARGUMENT_DEFINITION",a.INTERFACE="INTERFACE",a.UNION="UNION",a.ENUM="ENUM",a.ENUM_VALUE="ENUM_VALUE",a.INPUT_OBJECT="INPUT_OBJECT",a.INPUT_FIELD_DEFINITION="INPUT_FIELD_DEFINITION";const c=/[\x00-\x1f\x22\x5c\x7f-\x9f]/g;function p(e){return d[e.charCodeAt(0)]}const d=["\\u0000","\\u0001","\\u0002","\\u0003","\\u0004","\\u0005","\\u0006","\\u0007","\\b","\\t","\\n","\\u000B","\\f","\\r","\\u000E","\\u000F","\\u0010","\\u0011","\\u0012","\\u0013","\\u0014","\\u0015","\\u0016","\\u0017","\\u0018","\\u0019","\\u001A","\\u001B","\\u001C","\\u001D","\\u001E","\\u001F","","",'\\"',"","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","\\\\","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","\\u007F","\\u0080","\\u0081","\\u0082","\\u0083","\\u0084","\\u0085","\\u0086","\\u0087","\\u0088","\\u0089","\\u008A","\\u008B","\\u008C","\\u008D","\\u008E","\\u008F","\\u0090","\\u0091","\\u0092","\\u0093","\\u0094","\\u0095","\\u0096","\\u0097","\\u0098","\\u0099","\\u009A","\\u009B","\\u009C","\\u009D","\\u009E","\\u009F"];function f(e,t){if(!Boolean(e))throw new Error(t)}const v={Name:[],Document:["definitions"],OperationDefinition:["name","variableDefinitions","directives","selectionSet"],VariableDefinition:["variable","type","defaultValue","directives"],Variable:["name"],SelectionSet:["selections"],Field:["alias","name","arguments","directives","selectionSet"],Argument:["name","value"],FragmentSpread:["name","directives"],InlineFragment:["typeCondition","directives","selectionSet"],FragmentDefinition:["name","variableDefinitions","typeCondition","directives","selectionSet"],IntValue:[],FloatValue:[],StringValue:[],BooleanValue:[],NullValue:[],EnumValue:[],ListValue:["values"],ObjectValue:["fields"],ObjectField:["name","value"],Directive:["name","arguments"],NamedType:["name"],ListType:["type"],NonNullType:["type"],SchemaDefinition:["description","directives","operationTypes"],OperationTypeDefinition:["type"],ScalarTypeDefinition:["description","name","directives"],ObjectTypeDefinition:["description","name","interfaces","directives","fields"],FieldDefinition:["description","name","arguments","type","directives"],InputValueDefinition:["description","name","type","defaultValue","directives"],InterfaceTypeDefinition:["description","name","interfaces","directives","fields"],UnionTypeDefinition:["description","name","directives","types"],EnumTypeDefinition:["description","name","directives","values"],EnumValueDefinition:["description","name","directives"],InputObjectTypeDefinition:["description","name","directives","fields"],DirectiveDefinition:["description","name","arguments","locations"],SchemaExtension:["directives","operationTypes"],ScalarTypeExtension:["name","directives"],ObjectTypeExtension:["name","interfaces","directives","fields"],InterfaceTypeExtension:["name","interfaces","directives","fields"],UnionTypeExtension:["name","directives","types"],EnumTypeExtension:["name","directives","values"],InputObjectTypeExtension:["name","directives","fields"]},h=new Set(Object.keys(v));function y(e){const t=null==e?void 0:e.kind;return"string"==typeof t&&h.has(t)}let m;var N;let T;var I;(N=m||(m={})).QUERY="query",N.MUTATION="mutation",N.SUBSCRIPTION="subscription",(I=T||(T={})).NAME="Name",I.DOCUMENT="Document",I.OPERATION_DEFINITION="OperationDefinition",I.VARIABLE_DEFINITION="VariableDefinition",I.SELECTION_SET="SelectionSet",I.FIELD="Field",I.ARGUMENT="Argument",I.FRAGMENT_SPREAD="FragmentSpread",I.INLINE_FRAGMENT="InlineFragment",I.FRAGMENT_DEFINITION="FragmentDefinition",I.VARIABLE="Variable",I.INT="IntValue",I.FLOAT="FloatValue",I.STRING="StringValue",I.BOOLEAN="BooleanValue",I.NULL="NullValue",I.ENUM="EnumValue",I.LIST="ListValue",I.OBJECT="ObjectValue",I.OBJECT_FIELD="ObjectField",I.DIRECTIVE="Directive",I.NAMED_TYPE="NamedType",I.LIST_TYPE="ListType",I.NON_NULL_TYPE="NonNullType",I.SCHEMA_DEFINITION="SchemaDefinition",I.OPERATION_TYPE_DEFINITION="OperationTypeDefinition",I.SCALAR_TYPE_DEFINITION="ScalarTypeDefinition",I.OBJECT_TYPE_DEFINITION="ObjectTypeDefinition",I.FIELD_DEFINITION="FieldDefinition",I.INPUT_VALUE_DEFINITION="InputValueDefinition",I.INTERFACE_TYPE_DEFINITION="InterfaceTypeDefinition",I.UNION_TYPE_DEFINITION="UnionTypeDefinition",I.ENUM_TYPE_DEFINITION="EnumTypeDefinition",I.ENUM_VALUE_DEFINITION="EnumValueDefinition",I.INPUT_OBJECT_TYPE_DEFINITION="InputObjectTypeDefinition",I.DIRECTIVE_DEFINITION="DirectiveDefinition",I.SCHEMA_EXTENSION="SchemaExtension",I.SCALAR_TYPE_EXTENSION="ScalarTypeExtension",I.OBJECT_TYPE_EXTENSION="ObjectTypeExtension",I.INTERFACE_TYPE_EXTENSION="InterfaceTypeExtension",I.UNION_TYPE_EXTENSION="UnionTypeExtension",I.ENUM_TYPE_EXTENSION="EnumTypeExtension",I.INPUT_OBJECT_TYPE_EXTENSION="InputObjectTypeExtension";const E=Object.freeze({});function g(e,t){const n=e[t];return"object"==typeof n?n:"function"==typeof n?{enter:n,leave:void 0}:{enter:e.enter,leave:e.leave}}function b(e){return function(e,t,n=v){const s=new Map;for(const e of Object.values(T))s.set(e,g(t,e));let r,o,a,l=Array.isArray(e),u=[e],c=-1,p=[],d=e;const h=[],m=[];do{c++;const e=c===u.length,v=e&&0!==p.length;if(e){if(o=0===m.length?void 0:h[h.length-1],d=a,a=m.pop(),v)if(l){d=d.slice();let e=0;for(const[t,n]of p){const i=t-e;null===n?(d.splice(i,1),e++):d[i]=n}}else{d=Object.defineProperties({},Object.getOwnPropertyDescriptors(d));for(const[e,t]of p)d[e]=t}c=r.index,u=r.keys,p=r.edits,l=r.inArray,r=r.prev}else if(a){if(o=l?c:u[c],d=a[o],null==d)continue;h.push(o)}let T;if(!Array.isArray(d)){var N,I;y(d)||f(!1,`Invalid AST Node: ${i(d)}.`);const n=e?null===(N=s.get(d.kind))||void 0===N?void 0:N.leave:null===(I=s.get(d.kind))||void 0===I?void 0:I.enter;if(T=null==n?void 0:n.call(t,d,o,a,h,m),T===E)break;if(!1===T){if(!e){h.pop();continue}}else if(void 0!==T&&(p.push([o,T]),!e)){if(!y(T)){h.pop();continue}d=T}}var b;void 0===T&&v&&p.push([o,d]),e?h.pop():(r={inArray:l,index:c,keys:u,edits:p,prev:r},l=Array.isArray(d),u=l?d:null!==(b=n[d.kind])&&void 0!==b?b:[],c=-1,p=[],a&&m.push(a),a=d)}while(void 0!==r);return 0!==p.length?p[p.length-1][1]:e}(e,O)}const O={Name:{leave:e=>e.value},Variable:{leave:e=>"$"+e.name},Document:{leave:e=>S(e.definitions,"\n\n")},OperationDefinition:{leave(e){const t=_("(",S(e.variableDefinitions,", "),")"),n=S([e.operation,S([e.name,t]),S(e.directives," ")]," ");return("query"===n?"":n+" ")+e.selectionSet}},VariableDefinition:{leave:({variable:e,type:t,defaultValue:n,directives:i})=>e+": "+t+_(" = ",n)+_(" ",S(i," "))},SelectionSet:{leave:({selections:e})=>A(e)},Field:{leave({alias:e,name:t,arguments:n,directives:i,selectionSet:s}){const r=_("",e,": ")+t;let o=r+_("(",S(n,", "),")");return o.length>80&&(o=r+_("(\n",w(S(n,"\n")),"\n)")),S([o,S(i," "),s]," ")}},Argument:{leave:({name:e,value:t})=>e+": "+t},FragmentSpread:{leave:({name:e,directives:t})=>"..."+e+_(" ",S(t," "))},InlineFragment:{leave:({typeCondition:e,directives:t,selectionSet:n})=>S(["...",_("on ",e),S(t," "),n]," ")},FragmentDefinition:{leave:({name:e,typeCondition:t,variableDefinitions:n,directives:i,selectionSet:s})=>`fragment ${e}${_("(",S(n,", "),")")} on ${t} ${_("",S(i," ")," ")}`+s},IntValue:{leave:({value:e})=>e},FloatValue:{leave:({value:e})=>e},StringValue:{leave:({value:e,block:t})=>t?function(e,t){const n=e.replace(/"""/g,'\\"""'),i=n.split(/\r\n|[\n\r]/g),s=1===i.length,r=i.length>1&&i.slice(1).every((e=>0===e.length||l(e.charCodeAt(0)))),o=n.endsWith('\\"""'),a=e.endsWith('"')&&!o,u=e.endsWith("\\"),c=a||u,p=!s||e.length>70||c||r||o;let d="";const f=s&&l(e.charCodeAt(0));return(p&&!f||r)&&(d+="\n"),d+=n,(p||c)&&(d+="\n"),'"""'+d+'"""'}(e):`"${e.replace(c,p)}"`},BooleanValue:{leave:({value:e})=>e?"true":"false"},NullValue:{leave:()=>"null"},EnumValue:{leave:({value:e})=>e},ListValue:{leave:({values:e})=>"["+S(e,", ")+"]"},ObjectValue:{leave:({fields:e})=>"{"+S(e,", ")+"}"},ObjectField:{leave:({name:e,value:t})=>e+": "+t},Directive:{leave:({name:e,arguments:t})=>"@"+e+_("(",S(t,", "),")")},NamedType:{leave:({name:e})=>e},ListType:{leave:({type:e})=>"["+e+"]"},NonNullType:{leave:({type:e})=>e+"!"},SchemaDefinition:{leave:({description:e,directives:t,operationTypes:n})=>_("",e,"\n")+S(["schema",S(t," "),A(n)]," ")},OperationTypeDefinition:{leave:({operation:e,type:t})=>e+": "+t},ScalarTypeDefinition:{leave:({description:e,name:t,directives:n})=>_("",e,"\n")+S(["scalar",t,S(n," ")]," ")},ObjectTypeDefinition:{leave:({description:e,name:t,interfaces:n,directives:i,fields:s})=>_("",e,"\n")+S(["type",t,_("implements ",S(n," & ")),S(i," "),A(s)]," ")},FieldDefinition:{leave:({description:e,name:t,arguments:n,type:i,directives:s})=>_("",e,"\n")+t+(L(n)?_("(\n",w(S(n,"\n")),"\n)"):_("(",S(n,", "),")"))+": "+i+_(" ",S(s," "))},InputValueDefinition:{leave:({description:e,name:t,type:n,defaultValue:i,directives:s})=>_("",e,"\n")+S([t+": "+n,_("= ",i),S(s," ")]," ")},InterfaceTypeDefinition:{leave:({description:e,name:t,interfaces:n,directives:i,fields:s})=>_("",e,"\n")+S(["interface",t,_("implements ",S(n," & ")),S(i," "),A(s)]," ")},UnionTypeDefinition:{leave:({description:e,name:t,directives:n,types:i})=>_("",e,"\n")+S(["union",t,S(n," "),_("= ",S(i," | "))]," ")},EnumTypeDefinition:{leave:({description:e,name:t,directives:n,values:i})=>_("",e,"\n")+S(["enum",t,S(n," "),A(i)]," ")},EnumValueDefinition:{leave:({description:e,name:t,directives:n})=>_("",e,"\n")+S([t,S(n," ")]," ")},InputObjectTypeDefinition:{leave:({description:e,name:t,directives:n,fields:i})=>_("",e,"\n")+S(["input",t,S(n," "),A(i)]," ")},DirectiveDefinition:{leave:({description:e,name:t,arguments:n,repeatable:i,locations:s})=>_("",e,"\n")+"directive @"+t+(L(n)?_("(\n",w(S(n,"\n")),"\n)"):_("(",S(n,", "),")"))+(i?" repeatable":"")+" on "+S(s," | ")},SchemaExtension:{leave:({directives:e,operationTypes:t})=>S(["extend schema",S(e," "),A(t)]," ")},ScalarTypeExtension:{leave:({name:e,directives:t})=>S(["extend scalar",e,S(t," ")]," ")},ObjectTypeExtension:{leave:({name:e,interfaces:t,directives:n,fields:i})=>S(["extend type",e,_("implements ",S(t," & ")),S(n," "),A(i)]," ")},InterfaceTypeExtension:{leave:({name:e,interfaces:t,directives:n,fields:i})=>S(["extend interface",e,_("implements ",S(t," & ")),S(n," "),A(i)]," ")},UnionTypeExtension:{leave:({name:e,directives:t,types:n})=>S(["extend union",e,S(t," "),_("= ",S(n," | "))]," ")},EnumTypeExtension:{leave:({name:e,directives:t,values:n})=>S(["extend enum",e,S(t," "),A(n)]," ")},InputObjectTypeExtension:{leave:({name:e,directives:t,fields:n})=>S(["extend input",e,S(t," "),A(n)]," ")}};function S(e,t=""){var n;return null!==(n=null==e?void 0:e.filter((e=>e)).join(t))&&void 0!==n?n:""}function A(e){return _("{\n",w(S(e,"\n")),"\n}")}function _(e,t,n=""){return null!=t&&""!==t?e+t+n:""}function w(e){return _("  ",e.replace(/\n/g,"\n  "))}function L(e){var t;return null!==(t=null==e?void 0:e.some((e=>e.includes("\n"))))&&void 0!==t&&t}function D(e){return"object"==typeof e&&null!==e}function x(e){return e}const F=function(e,t){return e instanceof t};function R(e,t,n){const i=Object.create(null);for(const s of e)i[t(s)]=n(s);return i}function U(e,t){const n=Object.create(null);for(const i of Object.keys(e))n[i]=t(e[i],i);return n}function j(e){return!isNaN(e)&&48<=e&&e<=57}class V{constructor(e){this._input=e,this._inputLowerCase=e.toLowerCase(),this._inputArray=C(this._inputLowerCase),this._rows=[new Array(e.length+1).fill(0),new Array(e.length+1).fill(0),new Array(e.length+1).fill(0)]}measure(e,t){if(this._input===e)return 0;const n=e.toLowerCase();if(this._inputLowerCase===n)return 1;let i=C(n),s=this._inputArray;if(i.length<s.length){const e=i;i=s,s=e}const r=i.length,o=s.length;if(r-o>t)return;const a=this._rows;for(let e=0;e<=o;e++)a[0][e]=e;for(let e=1;e<=r;e++){const n=a[(e-1)%3],r=a[e%3];let l=r[0]=e;for(let t=1;t<=o;t++){const o=i[e-1]===s[t-1]?0:1;let u=Math.min(n[t]+1,r[t-1]+1,n[t-1]+o);if(e>1&&t>1&&i[e-1]===s[t-2]&&i[e-2]===s[t-1]){const n=a[(e-2)%3][t-2];u=Math.min(u,n+1)}u<l&&(l=u),r[t]=u}if(l>t)return}const l=a[r%3][o];return l<=t?l:void 0}}function C(e){const t=e.length,n=new Array(t);for(let i=0;i<t;++i)n[i]=e.charCodeAt(i);return n}function $(e){if(null==e)return Object.create(null);if(null===Object.getPrototypeOf(e))return e;const t=Object.create(null);for(const[n,i]of Object.entries(e))t[n]=i;return t}const B=/\r\n|[\n\r]/g;function M(e,t){let n=0,i=1;for(const s of e.body.matchAll(B)){if("number"==typeof s.index||r(!1),s.index>=t)break;n=s.index+s[0].length,i+=1}return{line:i,column:t+1-n}}function k(e,t){const n=e.locationOffset.column-1,i="".padStart(n)+e.body,s=t.line-1,r=e.locationOffset.line-1,o=t.line+r,a=1===t.line?n:0,l=t.column+a,u=`${e.name}:${o}:${l}\n`,c=i.split(/\r\n|[\n\r]/g),p=c[s];if(p.length>120){const e=Math.floor(l/80),t=l%80,n=[];for(let e=0;e<p.length;e+=80)n.push(p.slice(e,e+80));return u+P([[`${o} |`,n[0]],...n.slice(1,e+1).map((e=>["|",e])),["|","^".padStart(t)],["|",n[e+1]]])}return u+P([[o-1+" |",c[s-1]],[`${o} |`,p],["|","^".padStart(l)],[`${o+1} |`,c[s+1]]])}function P(e){const t=e.filter((([e,t])=>void 0!==t)),n=Math.max(...t.map((([e])=>e.length)));return t.map((([e,t])=>e.padStart(n)+(t?" "+t:""))).join("\n")}class G extends Error{constructor(e,...t){var n,i,s;const{nodes:r,source:o,positions:a,path:l,originalError:u,extensions:c}=function(e){const t=e[0];return null==t||"kind"in t||"length"in t?{nodes:t,source:e[1],positions:e[2],path:e[3],originalError:e[4],extensions:e[5]}:t}(t);super(e),this.name="GraphQLError",this.path=null!=l?l:void 0,this.originalError=null!=u?u:void 0,this.nodes=J(Array.isArray(r)?r:r?[r]:void 0);const p=J(null===(n=this.nodes)||void 0===n?void 0:n.map((e=>e.loc)).filter((e=>null!=e)));this.source=null!=o?o:null==p||null===(i=p[0])||void 0===i?void 0:i.source,this.positions=null!=a?a:null==p?void 0:p.map((e=>e.start)),this.locations=a&&o?a.map((e=>M(o,e))):null==p?void 0:p.map((e=>M(e.source,e.start)));const d=D(null==u?void 0:u.extensions)?null==u?void 0:u.extensions:void 0;this.extensions=null!==(s=null!=c?c:d)&&void 0!==s?s:Object.create(null),Object.defineProperties(this,{message:{writable:!0,enumerable:!0},name:{enumerable:!1},nodes:{enumerable:!1},source:{enumerable:!1},positions:{enumerable:!1},originalError:{enumerable:!1}}),null!=u&&u.stack?Object.defineProperty(this,"stack",{value:u.stack,writable:!0,configurable:!0}):Error.captureStackTrace?Error.captureStackTrace(this,G):Object.defineProperty(this,"stack",{value:Error().stack,writable:!0,configurable:!0})}get[Symbol.toStringTag](){return"GraphQLError"}toString(){let e=this.message;if(this.nodes)for(const n of this.nodes)n.loc&&(e+="\n\n"+k((t=n.loc).source,M(t.source,t.start)));else if(this.source&&this.locations)for(const t of this.locations)e+="\n\n"+k(this.source,t);var t;return e}toJSON(){const e={message:this.message};return null!=this.locations&&(e.locations=this.locations),null!=this.path&&(e.path=this.path),null!=this.extensions&&Object.keys(this.extensions).length>0&&(e.extensions=this.extensions),e}}function J(e){return void 0===e||0===e.length?void 0:e}function Q(e,t){switch(e.kind){case T.NULL:return null;case T.INT:return parseInt(e.value,10);case T.FLOAT:return parseFloat(e.value);case T.STRING:case T.ENUM:case T.BOOLEAN:return e.value;case T.LIST:return e.values.map((e=>Q(e,t)));case T.OBJECT:return R(e.fields,(e=>e.name.value),(e=>Q(e.value,t)));case T.VARIABLE:return null==t?void 0:t[e.name.value]}}function Y(e){if(null!=e||f(!1,"Must provide name."),"string"==typeof e||f(!1,"Expected name to be a string."),0===e.length)throw new G("Expected name to be a non-empty string.");for(let n=1;n<e.length;++n)if(!u(t=e.charCodeAt(n))&&!function(e){return e>=48&&e<=57}(t)&&95!==t)throw new G(`Names must only contain [_a-zA-Z0-9] but "${e}" does not.`);var t;if(!function(e){return u(e)||95===e}(e.charCodeAt(0)))throw new G(`Names must start with [_a-zA-Z] but "${e}" does not.`);return e}function z(e){if("true"===e||"false"===e||"null"===e)throw new G(`Enum values cannot be named: ${e}`);return Y(e)}function q(e){return H(e)||X(e)||W(e)||K(e)||Z(e)||ee(e)||te(e)||ne(e)}function H(e){return F(e,ae)}function X(e){return F(e,le)}function W(e){return F(e,ve)}function K(e){return F(e,he)}function Z(e){return F(e,me)}function ee(e){return F(e,Te)}function te(e){return F(e,ie)}function ne(e){return F(e,se)}class ie{constructor(e){q(e)||f(!1,`Expected ${i(e)} to be a GraphQL type.`),this.ofType=e}get[Symbol.toStringTag](){return"GraphQLList"}toString(){return"["+String(this.ofType)+"]"}toJSON(){return this.toString()}}class se{constructor(e){var t;q(t=e)&&!ne(t)||f(!1,`Expected ${i(e)} to be a GraphQL nullable type.`),this.ofType=e}get[Symbol.toStringTag](){return"GraphQLNonNull"}toString(){return String(this.ofType)+"!"}toJSON(){return this.toString()}}function re(e){return"function"==typeof e?e():e}function oe(e){return"function"==typeof e?e():e}class ae{constructor(e){var t,n,s,r;const o=null!==(t=e.parseValue)&&void 0!==t?t:x;this.name=Y(e.name),this.description=e.description,this.specifiedByURL=e.specifiedByURL,this.serialize=null!==(n=e.serialize)&&void 0!==n?n:x,this.parseValue=o,this.parseLiteral=null!==(s=e.parseLiteral)&&void 0!==s?s:(e,t)=>o(Q(e,t)),this.extensions=$(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(r=e.extensionASTNodes)&&void 0!==r?r:[],null==e.specifiedByURL||"string"==typeof e.specifiedByURL||f(!1,`${this.name} must provide "specifiedByURL" as a string, but got: ${i(e.specifiedByURL)}.`),null==e.serialize||"function"==typeof e.serialize||f(!1,`${this.name} must provide "serialize" function. If this custom Scalar is also used as an input type, ensure "parseValue" and "parseLiteral" functions are also provided.`),e.parseLiteral&&("function"==typeof e.parseValue&&"function"==typeof e.parseLiteral||f(!1,`${this.name} must provide both "parseValue" and "parseLiteral" functions.`))}get[Symbol.toStringTag](){return"GraphQLScalarType"}toConfig(){return{name:this.name,description:this.description,specifiedByURL:this.specifiedByURL,serialize:this.serialize,parseValue:this.parseValue,parseLiteral:this.parseLiteral,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}class le{constructor(e){var t;this.name=Y(e.name),this.description=e.description,this.isTypeOf=e.isTypeOf,this.extensions=$(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(t=e.extensionASTNodes)&&void 0!==t?t:[],this._fields=()=>ce(e),this._interfaces=()=>ue(e),null==e.isTypeOf||"function"==typeof e.isTypeOf||f(!1,`${this.name} must provide "isTypeOf" as a function, but got: ${i(e.isTypeOf)}.`)}get[Symbol.toStringTag](){return"GraphQLObjectType"}getFields(){return"function"==typeof this._fields&&(this._fields=this._fields()),this._fields}getInterfaces(){return"function"==typeof this._interfaces&&(this._interfaces=this._interfaces()),this._interfaces}toConfig(){return{name:this.name,description:this.description,interfaces:this.getInterfaces(),fields:fe(this.getFields()),isTypeOf:this.isTypeOf,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}function ue(e){var t;const n=re(null!==(t=e.interfaces)&&void 0!==t?t:[]);return Array.isArray(n)||f(!1,`${e.name} interfaces must be an Array or a function which returns an Array.`),n}function ce(e){const t=oe(e.fields);return de(t)||f(!1,`${e.name} fields must be an object with field names as keys or a function which returns such an object.`),U(t,((t,n)=>{var s;de(t)||f(!1,`${e.name}.${n} field config must be an object.`),null==t.resolve||"function"==typeof t.resolve||f(!1,`${e.name}.${n} field resolver must be a function if provided, but got: ${i(t.resolve)}.`);const r=null!==(s=t.args)&&void 0!==s?s:{};return de(r)||f(!1,`${e.name}.${n} args must be an object with argument names as keys.`),{name:Y(n),description:t.description,type:t.type,args:pe(r),resolve:t.resolve,subscribe:t.subscribe,deprecationReason:t.deprecationReason,extensions:$(t.extensions),astNode:t.astNode}}))}function pe(e){return Object.entries(e).map((([e,t])=>({name:Y(e),description:t.description,type:t.type,defaultValue:t.defaultValue,deprecationReason:t.deprecationReason,extensions:$(t.extensions),astNode:t.astNode})))}function de(e){return D(e)&&!Array.isArray(e)}function fe(e){return U(e,(e=>{return{description:e.description,type:e.type,args:(t=e.args,R(t,(e=>e.name),(e=>({description:e.description,type:e.type,defaultValue:e.defaultValue,deprecationReason:e.deprecationReason,extensions:e.extensions,astNode:e.astNode})))),resolve:e.resolve,subscribe:e.subscribe,deprecationReason:e.deprecationReason,extensions:e.extensions,astNode:e.astNode};var t}))}class ve{constructor(e){var t;this.name=Y(e.name),this.description=e.description,this.resolveType=e.resolveType,this.extensions=$(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(t=e.extensionASTNodes)&&void 0!==t?t:[],this._fields=ce.bind(void 0,e),this._interfaces=ue.bind(void 0,e),null==e.resolveType||"function"==typeof e.resolveType||f(!1,`${this.name} must provide "resolveType" as a function, but got: ${i(e.resolveType)}.`)}get[Symbol.toStringTag](){return"GraphQLInterfaceType"}getFields(){return"function"==typeof this._fields&&(this._fields=this._fields()),this._fields}getInterfaces(){return"function"==typeof this._interfaces&&(this._interfaces=this._interfaces()),this._interfaces}toConfig(){return{name:this.name,description:this.description,interfaces:this.getInterfaces(),fields:fe(this.getFields()),resolveType:this.resolveType,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}class he{constructor(e){var t;this.name=Y(e.name),this.description=e.description,this.resolveType=e.resolveType,this.extensions=$(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(t=e.extensionASTNodes)&&void 0!==t?t:[],this._types=ye.bind(void 0,e),null==e.resolveType||"function"==typeof e.resolveType||f(!1,`${this.name} must provide "resolveType" as a function, but got: ${i(e.resolveType)}.`)}get[Symbol.toStringTag](){return"GraphQLUnionType"}getTypes(){return"function"==typeof this._types&&(this._types=this._types()),this._types}toConfig(){return{name:this.name,description:this.description,types:this.getTypes(),resolveType:this.resolveType,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}function ye(e){const t=re(e.types);return Array.isArray(t)||f(!1,`Must provide Array of types or a function which returns such an array for Union ${e.name}.`),t}class me{constructor(e){var t,n,s;this.name=Y(e.name),this.description=e.description,this.extensions=$(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(t=e.extensionASTNodes)&&void 0!==t?t:[],this._values=(n=this.name,de(s=e.values)||f(!1,`${n} values must be an object with value names as keys.`),Object.entries(s).map((([e,t])=>(de(t)||f(!1,`${n}.${e} must refer to an object with a "value" key representing an internal value but got: ${i(t)}.`),{name:z(e),description:t.description,value:void 0!==t.value?t.value:e,deprecationReason:t.deprecationReason,extensions:$(t.extensions),astNode:t.astNode})))),this._valueLookup=new Map(this._values.map((e=>[e.value,e]))),this._nameLookup=function(e,t){const n=Object.create(null);for(const t of e)n[(i=t,i.name)]=t;var i;return n}(this._values)}get[Symbol.toStringTag](){return"GraphQLEnumType"}getValues(){return this._values}getValue(e){return this._nameLookup[e]}serialize(e){const t=this._valueLookup.get(e);if(void 0===t)throw new G(`Enum "${this.name}" cannot represent value: ${i(e)}`);return t.name}parseValue(e){if("string"!=typeof e){const t=i(e);throw new G(`Enum "${this.name}" cannot represent non-string value: ${t}.`+Ne(this,t))}const t=this.getValue(e);if(null==t)throw new G(`Value "${e}" does not exist in "${this.name}" enum.`+Ne(this,e));return t.value}parseLiteral(e,t){if(e.kind!==T.ENUM){const t=b(e);throw new G(`Enum "${this.name}" cannot represent non-enum value: ${t}.`+Ne(this,t),{nodes:e})}const n=this.getValue(e.value);if(null==n){const t=b(e);throw new G(`Value "${t}" does not exist in "${this.name}" enum.`+Ne(this,t),{nodes:e})}return n.value}toConfig(){const e=R(this.getValues(),(e=>e.name),(e=>({description:e.description,value:e.value,deprecationReason:e.deprecationReason,extensions:e.extensions,astNode:e.astNode})));return{name:this.name,description:this.description,values:e,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}function Ne(e,t){return function(e,t){const[n,i]=t?[e,t]:[void 0,e];let s=" Did you mean ";n&&(s+=n+" ");const r=i.map((e=>`"${e}"`));switch(r.length){case 0:return"";case 1:return s+r[0]+"?";case 2:return s+r[0]+" or "+r[1]+"?"}const o=r.slice(0,5),a=o.pop();return s+o.join(", ")+", or "+a+"?"}("the enum value",function(e,t){const n=Object.create(null),i=new V(e),s=Math.floor(.4*e.length)+1;for(const e of t){const t=i.measure(e,s);void 0!==t&&(n[e]=t)}return Object.keys(n).sort(((e,t)=>{const i=n[e]-n[t];return 0!==i?i:function(e,t){let n=0,i=0;for(;n<e.length&&i<t.length;){let s=e.charCodeAt(n),r=t.charCodeAt(i);if(j(s)&&j(r)){let o=0;do{++n,o=10*o+s-48,s=e.charCodeAt(n)}while(j(s)&&o>0);let a=0;do{++i,a=10*a+r-48,r=t.charCodeAt(i)}while(j(r)&&a>0);if(o<a)return-1;if(o>a)return 1}else{if(s<r)return-1;if(s>r)return 1;++n,++i}}return e.length-t.length}(e,t)}))}(t,e.getValues().map((e=>e.name))))}class Te{constructor(e){var t;this.name=Y(e.name),this.description=e.description,this.extensions=$(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(t=e.extensionASTNodes)&&void 0!==t?t:[],this._fields=Ie.bind(void 0,e)}get[Symbol.toStringTag](){return"GraphQLInputObjectType"}getFields(){return"function"==typeof this._fields&&(this._fields=this._fields()),this._fields}toConfig(){const e=U(this.getFields(),(e=>({description:e.description,type:e.type,defaultValue:e.defaultValue,deprecationReason:e.deprecationReason,extensions:e.extensions,astNode:e.astNode})));return{name:this.name,description:this.description,fields:e,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}function Ie(e){const t=oe(e.fields);return de(t)||f(!1,`${e.name} fields must be an object with field names as keys or a function which returns such an object.`),U(t,((t,n)=>(!("resolve"in t)||f(!1,`${e.name}.${n} field has a resolve property, but Input Types cannot define resolvers.`),{name:Y(n),description:t.description,type:t.type,defaultValue:t.defaultValue,deprecationReason:t.deprecationReason,extensions:$(t.extensions),astNode:t.astNode})))}const Ee=2147483647,ge=-2147483648,be=new ae({name:"Int",description:"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.",serialize(e){const t=we(e);if("boolean"==typeof t)return t?1:0;let n=t;if("string"==typeof t&&""!==t&&(n=Number(t)),"number"!=typeof n||!Number.isInteger(n))throw new G(`Int cannot represent non-integer value: ${i(t)}`);if(n>Ee||n<ge)throw new G("Int cannot represent non 32-bit signed integer value: "+i(t));return n},parseValue(e){if("number"!=typeof e||!Number.isInteger(e))throw new G(`Int cannot represent non-integer value: ${i(e)}`);if(e>Ee||e<ge)throw new G(`Int cannot represent non 32-bit signed integer value: ${e}`);return e},parseLiteral(e){if(e.kind!==T.INT)throw new G(`Int cannot represent non-integer value: ${b(e)}`,{nodes:e});const t=parseInt(e.value,10);if(t>Ee||t<ge)throw new G(`Int cannot represent non 32-bit signed integer value: ${e.value}`,{nodes:e});return t}}),Oe=new ae({name:"Float",description:"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).",serialize(e){const t=we(e);if("boolean"==typeof t)return t?1:0;let n=t;if("string"==typeof t&&""!==t&&(n=Number(t)),"number"!=typeof n||!Number.isFinite(n))throw new G(`Float cannot represent non numeric value: ${i(t)}`);return n},parseValue(e){if("number"!=typeof e||!Number.isFinite(e))throw new G(`Float cannot represent non numeric value: ${i(e)}`);return e},parseLiteral(e){if(e.kind!==T.FLOAT&&e.kind!==T.INT)throw new G(`Float cannot represent non numeric value: ${b(e)}`,e);return parseFloat(e.value)}}),Se=new ae({name:"String",description:"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.",serialize(e){const t=we(e);if("string"==typeof t)return t;if("boolean"==typeof t)return t?"true":"false";if("number"==typeof t&&Number.isFinite(t))return t.toString();throw new G(`String cannot represent value: ${i(e)}`)},parseValue(e){if("string"!=typeof e)throw new G(`String cannot represent a non string value: ${i(e)}`);return e},parseLiteral(e){if(e.kind!==T.STRING)throw new G(`String cannot represent a non string value: ${b(e)}`,{nodes:e});return e.value}}),Ae=new ae({name:"Boolean",description:"The `Boolean` scalar type represents `true` or `false`.",serialize(e){const t=we(e);if("boolean"==typeof t)return t;if(Number.isFinite(t))return 0!==t;throw new G(`Boolean cannot represent a non boolean value: ${i(t)}`)},parseValue(e){if("boolean"!=typeof e)throw new G(`Boolean cannot represent a non boolean value: ${i(e)}`);return e},parseLiteral(e){if(e.kind!==T.BOOLEAN)throw new G(`Boolean cannot represent a non boolean value: ${b(e)}`,{nodes:e});return e.value}}),_e=new ae({name:"ID",description:'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.',serialize(e){const t=we(e);if("string"==typeof t)return t;if(Number.isInteger(t))return String(t);throw new G(`ID cannot represent value: ${i(e)}`)},parseValue(e){if("string"==typeof e)return e;if("number"==typeof e&&Number.isInteger(e))return e.toString();throw new G(`ID cannot represent value: ${i(e)}`)},parseLiteral(e){if(e.kind!==T.STRING&&e.kind!==T.INT)throw new G("ID cannot represent a non-string and non-integer value: "+b(e),{nodes:e});return e.value}});function we(e){if(D(e)){if("function"==typeof e.valueOf){const t=e.valueOf();if(!D(t))return t}if("function"==typeof e.toJSON)return e.toJSON()}return e}function Le(e,t){if(ne(t)){const n=Le(e,t.ofType);return(null==n?void 0:n.kind)===T.NULL?null:n}if(null===e)return{kind:T.NULL};if(void 0===e)return null;if(te(t)){const i=t.ofType;if("object"==typeof(n=e)&&"function"==typeof(null==n?void 0:n[Symbol.iterator])){const t=[];for(const n of e){const e=Le(n,i);null!=e&&t.push(e)}return{kind:T.LIST,values:t}}return Le(e,i)}var n;if(ee(t)){if(!D(e))return null;const n=[];for(const i of Object.values(t.getFields())){const t=Le(e[i.name],i.type);t&&n.push({kind:T.OBJECT_FIELD,name:{kind:T.NAME,value:i.name},value:t})}return{kind:T.OBJECT,fields:n}}if(function(e){return H(e)||Z(e)}(t)){const n=t.serialize(e);if(null==n)return null;if("boolean"==typeof n)return{kind:T.BOOLEAN,value:n};if("number"==typeof n&&Number.isFinite(n)){const e=String(n);return De.test(e)?{kind:T.INT,value:e}:{kind:T.FLOAT,value:e}}if("string"==typeof n)return Z(t)?{kind:T.ENUM,value:n}:t===_e&&De.test(n)?{kind:T.INT,value:n}:{kind:T.STRING,value:n};throw new TypeError(`Cannot convert value to AST: ${i(n)}.`)}r(!1,"Unexpected input type: "+i(t))}Object.freeze([Se,be,Oe,Ae,_e]);const De=/^-?(?:0|[1-9][0-9]*)$/,xe=new le({name:"__Schema",description:"A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.",fields:()=>({description:{type:Se,resolve:e=>e.description},types:{description:"A list of all types supported by this server.",type:new se(new ie(new se(Ue))),resolve:e=>Object.values(e.getTypeMap())},queryType:{description:"The type that query operations will be rooted at.",type:new se(Ue),resolve:e=>e.getQueryType()},mutationType:{description:"If this server supports mutation, the type that mutation operations will be rooted at.",type:Ue,resolve:e=>e.getMutationType()},subscriptionType:{description:"If this server support subscription, the type that subscription operations will be rooted at.",type:Ue,resolve:e=>e.getSubscriptionType()},directives:{description:"A list of all directives supported by this server.",type:new se(new ie(new se(Fe))),resolve:e=>e.getDirectives()}})}),Fe=new le({name:"__Directive",description:"A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.\n\nIn some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.",fields:()=>({name:{type:new se(Se),resolve:e=>e.name},description:{type:Se,resolve:e=>e.description},isRepeatable:{type:new se(Ae),resolve:e=>e.isRepeatable},locations:{type:new se(new ie(new se(Re))),resolve:e=>e.locations},args:{type:new se(new ie(new se(Ve))),args:{includeDeprecated:{type:Ae,defaultValue:!1}},resolve:(e,{includeDeprecated:t})=>t?e.args:e.args.filter((e=>null==e.deprecationReason))}})}),Re=new me({name:"__DirectiveLocation",description:"A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.",values:{QUERY:{value:o.QUERY,description:"Location adjacent to a query operation."},MUTATION:{value:o.MUTATION,description:"Location adjacent to a mutation operation."},SUBSCRIPTION:{value:o.SUBSCRIPTION,description:"Location adjacent to a subscription operation."},FIELD:{value:o.FIELD,description:"Location adjacent to a field."},FRAGMENT_DEFINITION:{value:o.FRAGMENT_DEFINITION,description:"Location adjacent to a fragment definition."},FRAGMENT_SPREAD:{value:o.FRAGMENT_SPREAD,description:"Location adjacent to a fragment spread."},INLINE_FRAGMENT:{value:o.INLINE_FRAGMENT,description:"Location adjacent to an inline fragment."},VARIABLE_DEFINITION:{value:o.VARIABLE_DEFINITION,description:"Location adjacent to a variable definition."},SCHEMA:{value:o.SCHEMA,description:"Location adjacent to a schema definition."},SCALAR:{value:o.SCALAR,description:"Location adjacent to a scalar definition."},OBJECT:{value:o.OBJECT,description:"Location adjacent to an object type definition."},FIELD_DEFINITION:{value:o.FIELD_DEFINITION,description:"Location adjacent to a field definition."},ARGUMENT_DEFINITION:{value:o.ARGUMENT_DEFINITION,description:"Location adjacent to an argument definition."},INTERFACE:{value:o.INTERFACE,description:"Location adjacent to an interface definition."},UNION:{value:o.UNION,description:"Location adjacent to a union definition."},ENUM:{value:o.ENUM,description:"Location adjacent to an enum definition."},ENUM_VALUE:{value:o.ENUM_VALUE,description:"Location adjacent to an enum value definition."},INPUT_OBJECT:{value:o.INPUT_OBJECT,description:"Location adjacent to an input object type definition."},INPUT_FIELD_DEFINITION:{value:o.INPUT_FIELD_DEFINITION,description:"Location adjacent to an input object field definition."}}}),Ue=new le({name:"__Type",description:"The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.",fields:()=>({kind:{type:new se(Me),resolve:e=>H(e)?$e.SCALAR:X(e)?$e.OBJECT:W(e)?$e.INTERFACE:K(e)?$e.UNION:Z(e)?$e.ENUM:ee(e)?$e.INPUT_OBJECT:te(e)?$e.LIST:ne(e)?$e.NON_NULL:void r(!1,`Unexpected type: "${i(e)}".`)},name:{type:Se,resolve:e=>"name"in e?e.name:void 0},description:{type:Se,resolve:e=>"description"in e?e.description:void 0},specifiedByURL:{type:Se,resolve:e=>"specifiedByURL"in e?e.specifiedByURL:void 0},fields:{type:new ie(new se(je)),args:{includeDeprecated:{type:Ae,defaultValue:!1}},resolve(e,{includeDeprecated:t}){if(X(e)||W(e)){const n=Object.values(e.getFields());return t?n:n.filter((e=>null==e.deprecationReason))}}},interfaces:{type:new ie(new se(Ue)),resolve(e){if(X(e)||W(e))return e.getInterfaces()}},possibleTypes:{type:new ie(new se(Ue)),resolve(e,t,n,{schema:i}){if(function(e){return W(e)||K(e)}(e))return i.getPossibleTypes(e)}},enumValues:{type:new ie(new se(Ce)),args:{includeDeprecated:{type:Ae,defaultValue:!1}},resolve(e,{includeDeprecated:t}){if(Z(e)){const n=e.getValues();return t?n:n.filter((e=>null==e.deprecationReason))}}},inputFields:{type:new ie(new se(Ve)),args:{includeDeprecated:{type:Ae,defaultValue:!1}},resolve(e,{includeDeprecated:t}){if(ee(e)){const n=Object.values(e.getFields());return t?n:n.filter((e=>null==e.deprecationReason))}}},ofType:{type:Ue,resolve:e=>"ofType"in e?e.ofType:void 0}})}),je=new le({name:"__Field",description:"Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.",fields:()=>({name:{type:new se(Se),resolve:e=>e.name},description:{type:Se,resolve:e=>e.description},args:{type:new se(new ie(new se(Ve))),args:{includeDeprecated:{type:Ae,defaultValue:!1}},resolve:(e,{includeDeprecated:t})=>t?e.args:e.args.filter((e=>null==e.deprecationReason))},type:{type:new se(Ue),resolve:e=>e.type},isDeprecated:{type:new se(Ae),resolve:e=>null!=e.deprecationReason},deprecationReason:{type:Se,resolve:e=>e.deprecationReason}})}),Ve=new le({name:"__InputValue",description:"Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.",fields:()=>({name:{type:new se(Se),resolve:e=>e.name},description:{type:Se,resolve:e=>e.description},type:{type:new se(Ue),resolve:e=>e.type},defaultValue:{type:Se,description:"A GraphQL-formatted string representing the default value for this input value.",resolve(e){const{type:t,defaultValue:n}=e,i=Le(n,t);return i?b(i):null}},isDeprecated:{type:new se(Ae),resolve:e=>null!=e.deprecationReason},deprecationReason:{type:Se,resolve:e=>e.deprecationReason}})}),Ce=new le({name:"__EnumValue",description:"One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.",fields:()=>({name:{type:new se(Se),resolve:e=>e.name},description:{type:Se,resolve:e=>e.description},isDeprecated:{type:new se(Ae),resolve:e=>null!=e.deprecationReason},deprecationReason:{type:Se,resolve:e=>e.deprecationReason}})});let $e;var Be;(Be=$e||($e={})).SCALAR="SCALAR",Be.OBJECT="OBJECT",Be.INTERFACE="INTERFACE",Be.UNION="UNION",Be.ENUM="ENUM",Be.INPUT_OBJECT="INPUT_OBJECT",Be.LIST="LIST",Be.NON_NULL="NON_NULL";const Me=new me({name:"__TypeKind",description:"An enum describing what kind of type a given `__Type` is.",values:{SCALAR:{value:$e.SCALAR,description:"Indicates this type is a scalar."},OBJECT:{value:$e.OBJECT,description:"Indicates this type is an object. `fields` and `interfaces` are valid fields."},INTERFACE:{value:$e.INTERFACE,description:"Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields."},UNION:{value:$e.UNION,description:"Indicates this type is a union. `possibleTypes` is a valid field."},ENUM:{value:$e.ENUM,description:"Indicates this type is an enum. `enumValues` is a valid field."},INPUT_OBJECT:{value:$e.INPUT_OBJECT,description:"Indicates this type is an input object. `inputFields` is a valid field."},LIST:{value:$e.LIST,description:"Indicates this type is a list. `ofType` is a valid field."},NON_NULL:{value:$e.NON_NULL,description:"Indicates this type is a non-null. `ofType` is a valid field."}}}),ke={name:"__schema",type:new se(xe),description:"Access the current type schema of this server.",args:[],resolve:(e,t,n,{schema:i})=>i,deprecationReason:void 0,extensions:Object.create(null),astNode:void 0},Pe={name:"__type",type:Ue,description:"Request the type information of a single type.",args:[{name:"name",description:void 0,type:new se(Se),defaultValue:void 0,deprecationReason:void 0,extensions:Object.create(null),astNode:void 0}],resolve:(e,{name:t},n,{schema:i})=>i.getType(t),deprecationReason:void 0,extensions:Object.create(null),astNode:void 0},Ge={name:"__typename",type:new se(Se),description:"The name of the current Object type at runtime.",args:[],resolve:(e,t,n,{parentType:i})=>i.name,deprecationReason:void 0,extensions:Object.create(null),astNode:void 0};Object.freeze([xe,Fe,Re,Ue,je,Ve,Ce,Me])}}]);